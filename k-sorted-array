class Solution {
    static int index = 0;
    static ArrayList<Integer> temp = new ArrayList<>();

    public static void swap(ArrayList<Integer> temp, int i, int j) {
        int dummy = temp.get(i);
        temp.set(i, temp.get(j));
        temp.set(j, dummy);
    }

    public static void insert(int idx, int[] arr) {
        temp.add(idx);
        int child = temp.size() - 1;
        int parent = (child - 1) / 2;
        while (child > 0 && arr[temp.get(parent)] > arr[temp.get(child)]) {
            swap(temp, parent, child);
            child = parent;
            parent = (child - 1) / 2;
        }
    }

    public static void delete(int[] arr) {
        if (temp.size() == 0) return;
        temp.set(0, temp.get(temp.size() - 1));
        temp.remove(temp.size() - 1);
        int parent = 0;
        while (true) {
            int left = 2 * parent + 1;
            int right = 2 * parent + 2;
            int smallest = parent;

            if (left < temp.size() && arr[temp.get(left)] < arr[temp.get(smallest)])
                smallest = left;
            if (right < temp.size() && arr[temp.get(right)] < arr[temp.get(smallest)])
                smallest = right;

            if (smallest != parent) {
                swap(temp, parent, smallest);
                parent = smallest;
            } else break;
        }
    }

    static String isKSortedArray(int arr[], int n, int k) {
        temp.clear();
        index = 0;

        for (int i = 0; i < n; i++) {
            insert(i, arr);

            if (temp.size() > k + 1) {
                int topIndex = temp.get(0);
                delete(arr);
                if (Math.abs(topIndex - index) > k) return "No";
                index++;
            }
        }

        while (temp.size() > 0) {
            int topIndex = temp.get(0);
            delete(arr);
            if (Math.abs(topIndex - index) > k) return "No";
            index++;
        }

        return "Yes";
    }
}
