class Solution {
   
    public ArrayList<Integer> topKSumPairs(int[] a, int[] b, int k) {
        int n = a.length ;
        Arrays.sort(a) ;
        Arrays.sort(b) ;

        ArrayList<Integer> result = new ArrayList<>() ;

        PriorityQueue<int[]> maxHeap = new PriorityQueue<>(new Comparator<int[]>() {
            public int compare(int[] x, int[] y) {
                return y[0] - x[0] ;
            }
        }) ;

        Set<String> visited = new HashSet<>() ;

        maxHeap.offer(new int[]{a[n-1] + b[n-1], n-1, n-1}) ;
        visited.add((n-1) + "," + (n-1)) ;

        while (k-- > 0 && !maxHeap.isEmpty()) {
            int[] curr = maxHeap.poll() ;
            int sum = curr[0], i = curr[1], j = curr[2] ;
            result.add(sum) ;

            if (i-1 >= 0) {
                String key1 = (i-1) + "," + j ;
                if (!visited.contains(key1)) {
                    maxHeap.offer(new int[]{a[i-1] + b[j], i-1, j}) ;
                    visited.add(key1) ;
                }
            }

            if (j-1 >= 0) {
                String key2 = i + "," + (j-1) ;
                if (!visited.contains(key2)) {
                    maxHeap.offer(new int[]{a[i] + b[j-1], i, j-1}) ;
                    visited.add(key2) ;
                }
            }
        }

        return result ;
    }
}
    
